def update_graphs(stored_data, current_index_data, date_store_data):
    map_fig = go.Figure()
    series_fig = go.Figure()
    map_title = "Карта геофизических эффектов"
    series_title = "Данные временного ряда"
    
    anomaly_polygon_coords = data_processing.generate_equatorial_poly()
    poly_lons, poly_lats = zip(*anomaly_polygon_coords)
    map_fig.add_trace(go.Scattergeo(
        lon=poly_lons, lat=poly_lats, mode='lines', fill='toself', 
        fillcolor='rgba(255, 0, 0, 0.3)', name='Зона аномалии', showlegend=False
    ))
    
    if not stored_data or not current_index_data or not date_store_data:
        # Если данных нет (первый запуск), ничего не обновляем
        return no_update, no_update
    
    events_metadata = stored_data.get('events_metadata', [])
    current_index = current_index_data.get('index', 0)
    study_date_str = date_store_data.get('date')
    study_date = datetime.fromisoformat(study_date_str) if study_date_str else None

    if not events_metadata:
        map_title = "Не найдено подходящих сегментов"
    elif current_index >= len(events_metadata):
        map_title = "Маркировка завершена!"
        series_fig.update_layout(title="Нет данных для отображения")
    else:
        event_metadata = events_metadata[current_index]
        event_id = event_metadata['id']
        station_id = event_metadata['station_id']
        satellite_id = event_metadata['satellite_id']
        map_title = f"Сегмент на проверке: {event_id}"

        segment_to_display = get_segment_from_cache(event_id)
        if not segment_to_display:
            map_title = f"Ошибка: данные для сегмента {event_id} не найдены в кэше."
            # Возвращаем карту с ошибкой и пустой график
            map_fig.update_layout(title=map_title, geo=dict(projection_type='orthographic'))
            series_fig.update_layout(title="Ошибка загрузки данных")
            return map_fig, series_fig
        
        # Отображение станции
        site = data_processing.get_site_data_by_id(station_id)
        if site:
            map_fig.add_trace(go.Scattergeo(
                lon=[site['lon']], lat=[site['lat']], text=site['id'].upper(), mode='markers+text', 
                marker=dict(color='blue', size=10, symbol='triangle-up'), textposition='top right', 
                name=f"Станция {site['id'].upper()}"
            ))

        # Отображение траектории
        points = segment_to_display.get('points', [])
        lats = [p['lat'] for p in points]; lons = [p['lon'] for p in points]
        map_fig.add_trace(go.Scattergeo(
            lon=lons, lat=lats, mode='lines', 
            line=dict(width=3, color='purple'), name=segment_to_display['id']
        ))
        
        intersections = segment_to_display.get('intersections', [])
        if intersections:
            int_lats = [p['lat'] for p in intersections]
            int_lons = [p['lon'] for p in intersections]
            
            hover_texts = []
            for i, p in enumerate(intersections):
                event_type = "Вход" if i % 2 == 0 else "Выход"
                event_num = i // 2 + 1
                time_obj = datetime.fromisoformat(p['time'])
                time_str = time_obj.strftime('%H:%M:%S')
                hover_texts.append(f"{event_type} {event_num}<br>Время: {time_str}")

            map_fig.add_trace(go.Scattergeo(
                lon=int_lons,
                lat=int_lats,
                mode='markers',
                marker=dict(
                    color='lime',
                    size=8,
                    symbol='circle',
                    line=dict(width=1, color='black')
                ),
                hoverinfo='text',
                text=hover_texts,
                name='Точки пересечения'
            ))

        series_data = data_processing.get_series_data_for_trajectory(
            study_date=study_date,
            station_id=station_id, # Берем из метаданных
            satellite_id=satellite_id, # Берем из метаданных
            product=data_processing.DataProducts.roti
        )
        if series_data:
            series_title = f"ROTI для {segment_to_display['id']}"
            times_dt = [datetime.fromisoformat(t) for t in series_data['time']]
            
            series_fig.add_trace(go.Scatter(
                x=times_dt, y=series_data['value'], mode='lines+markers',
                name=series_data['product_name']
            ))
            series_fig.update_layout(yaxis_title=f"{series_data['product_name']}, {series_data['product_units']}")
            
            if intersections:
                for i, intersection in enumerate(intersections):
                    is_entry = (i % 2 == 0)
                    line_color = "green" if is_entry else "red"
                    event_number = i // 2 + 1
                    annotation_text = f"Вход {event_number}" if is_entry else f"Выход {event_number}"
                    intersection_time_dt = datetime.fromisoformat(intersection['time'])
                    intersection_timestamp = intersection_time_dt.timestamp() * 1000
                    
                    series_fig.add_vline(
                        x=intersection_timestamp, line_width=2, line_dash="dash", line_color=line_color,
                        annotation_text=annotation_text, annotation_position="top left" if is_entry else "top right"
                    )

                series_fig.update_xaxes(
                    title="Время (UTC)", type="date", tickformat="%Y-%m-%d\n%H:%M:%S"
                )
        else:
            series_title = f"Нет данных для {segment_to_display['id']}"

    map_fig.update_layout(
        title=map_title, width=None, height=600,
        geo=dict(projection_type='orthographic', lonaxis_showgrid=True, lataxis_showgrid=True)
    )
    series_fig.update_layout(
        title=series_title, xaxis_title="Время (UTC)", width=None, height=600
    )
    
    return map_fig, series_fig
