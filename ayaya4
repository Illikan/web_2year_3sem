# data_processing.py

# ... (импорты) ...

# --- НОВЫЙ КЭШ ДЛЯ ГЕОМЕТРИИ ---
# Этот словарь будет жить, пока работает сервер Dash
GEOMETRY_CACHE = {}

def cache_segment_data(segment_id, segment_data):
    """Сохраняет данные сегмента в кэш."""
    GEOMETRY_CACHE[segment_id] = segment_data

def get_segment_from_cache(segment_id):
    """Возвращает данные сегмента из кэша."""
    return GEOMETRY_CACHE.get(segment_id)

def clear_geometry_cache():
    """Очищает кэш (полезно вызывать перед каждым новым анализом)."""
    GEOMETRY_CACHE.clear()

# data_processing.py

def get_main_map_data(study_date: datetime):
    # ...
    # Перед началом нового анализа очищаем старый кэш
    clear_geometry_cache()
    
    all_events_metadata = [] # Будем хранить только метаданные
    
    # ... (весь цикл обработки до сохранения результата) ...

    # внутри цикла, после проверки if is_valid:
    if is_valid:
        segment_id = f"{site_data['id']}-{sat_id}-{part_number}"
        
        # --- КЛЮЧЕВОЕ ИЗМЕНЕНИЕ ---
        # 1. Сохраняем "тяжелые" данные в кэш на сервере
        full_segment_data = {
            'points': [{**p, 'time': p['time'].isoformat()} for p in segment],
            'intersections': [{**p, 'time': p['time'].isoformat()} for p in intersections]
        }
        cache_segment_data(segment_id, full_segment_data)
        
        # 2. Готовим "легкие" метаданные для передачи на frontend
        event_metadata = {
            'id': segment_id,
            'station_id': site_data['id'],
            'satellite_id': sat_id,
            # ВМЕСТО ПОЛНОГО СПИСКА ТОЧЕК - НИЧЕГО!
            # Вся геометрия теперь в кэше.
            'entry_time': intersections[0]['time'].isoformat(),
            'exit_time': intersections[-1]['time'].isoformat(),
            'has_effect': False 
        }
        all_events_metadata.append(event_metadata)
        
        part_number += 1
    
    # ... (конец циклов) ...
    
    print(f"\nОбработка завершена. Найдено событий: {len(all_events_metadata)}")
    
    # Возвращаем легкий список метаданных
    return all_events_metadata, study_date


# app.py

# Импортируем новую функцию
from data_processing import get_segment_from_cache 

# ... (остальной код приложения) ...

@app.callback(
    Output('globe-graph', 'figure'),
    # ...
)
def update_graphs_from_stored_data(stored_data):
    # ...
    # stored_data теперь содержит 'events_metadata'
    events_metadata = stored_data.get('events_metadata', [])
    
    # ... (код для отрисовки полигона и станций) ...

    if events_metadata:
        for event in events_metadata:
            event_id = event['id']
            
            # --- КЛЮЧЕВОЕ ИЗМЕНЕНИЕ ---
            # Получаем полные данные из серверного кэша по ID
            segment_data = get_segment_from_cache(event_id)
            
            if not segment_data:
                print(f"Внимание: не найдены данные в кэше для ID {event_id}")
                continue

            # Теперь у нас есть точки, и мы можем рисовать
            points = segment_data['points']
            lats = [p['lat'] for p in points]
            lons = [p['lon'] for p in points]
            
            map_fig.add_trace(go.Scattergeo(
                lon=lons,
                lat=lats,
                mode='lines',
                line=dict(width=2, color='orange'),
                name=event_id
                # ... и т.д.
            ))
            
            # Также можно нарисовать точки входа/выхода
            intersections = segment_data.get('intersections', [])
            if intersections:
                entry = intersections[0]
                exit_p = intersections[-1]
                map_fig.add_trace(go.Scattergeo(
                    lon=[entry['lon'], exit_p['lon']],
                    lat=[entry['lat'], exit_p['lat']],
                    mode='markers',
                    marker=dict(size=8, color='red', symbol='cross'),
                    name=f"{event_id} crossings"
                ))

    # ...
    return map_fig, series_fig

























def update_graphs(stored_data):
    map_fig = go.Figure()
    series_fig = go.Figure()
    map_title = "Карта геофизических эффектов"
    series_title = "Данные временного ряда"
    
    anomaly_polygon_coords = data_processing.generate_equatorial_poly()
    poly_lons, poly_lats = zip(*anomaly_polygon_coords)
    map_fig.add_trace(go.Scattergeo(
        lon=poly_lons, lat=poly_lats, mode='lines', fill='toself', 
        fillcolor='rgba(255, 0, 0, 0.3)', name='Зона аномалии', showlegend=False
    ))
    
    if all_segments is None or current_index is None or study_date_str is None:
        return no_update, no_update

    if not all_segments:
        map_title = "Не найдено подходящих сегментов"
    elif current_index >= len(all_segments):
        map_title = "Маркировка завершена!"
        series_fig.update_layout(title="Нет данных для отображения")
    else:
        segment_to_display = all_segments[current_index]
        station_id = segment_to_display['station_id']
        map_title = f"Сегмент на проверке: {segment_to_display['id']}"
        
        # Отображение станции
        site = data_processing.get_site_data_by_id(station_id)
        if site:
            map_fig.add_trace(go.Scattergeo(
                lon=[site['lon']], lat=[site['lat']], text=site['id'].upper(), mode='markers+text', 
                marker=dict(color='blue', size=10, symbol='triangle-up'), textposition='top right', 
                name=f"Станция {site['id'].upper()}"
            ))

        # Отображение траектории
        points = segment_to_display.get('points', [])
        lats = [p['lat'] for p in points]; lons = [p['lon'] for p in points]
        map_fig.add_trace(go.Scattergeo(
            lon=lons, lat=lats, mode='lines', 
            line=dict(width=3, color='purple'), name=segment_to_display['id']
        ))
        
        intersections = segment_to_display.get('intersections', [])
        if intersections:
            int_lats = [p['lat'] for p in intersections]
            int_lons = [p['lon'] for p in intersections]
            
            hover_texts = []
            for i, p in enumerate(intersections):
                event_type = "Вход" if i % 2 == 0 else "Выход"
                event_num = i // 2 + 1
                time_obj = datetime.fromisoformat(p['time'])
                time_str = time_obj.strftime('%H:%M:%S')
                hover_texts.append(f"{event_type} {event_num}<br>Время: {time_str}")

            map_fig.add_trace(go.Scattergeo(
                lon=int_lons,
                lat=int_lats,
                mode='markers',
                marker=dict(
                    color='lime',
                    size=8,
                    symbol='circle',
                    line=dict(width=1, color='black')
                ),
                hoverinfo='text',
                text=hover_texts,
                name='Точки пересечения'
            ))

        study_date = datetime.fromisoformat(study_date_str)
        series_data = data_processing.get_series_data_for_trajectory(
            study_date=study_date,
            station_id=segment_to_display['station_id'],
            satellite_id=segment_to_display['satellite_id'],
            product=data_processing.DataProducts.roti
        )
        if series_data:
            series_title = f"ROTI для {segment_to_display['id']}"
            times_dt = [datetime.fromisoformat(t) for t in series_data['time']]
            
            series_fig.add_trace(go.Scatter(
                x=times_dt, y=series_data['value'], mode='lines+markers',
                name=series_data['product_name']
            ))
            series_fig.update_layout(yaxis_title=f"{series_data['product_name']}, {series_data['product_units']}")
            
            if intersections:
                for i, intersection in enumerate(intersections):
                    is_entry = (i % 2 == 0)
                    line_color = "green" if is_entry else "red"
                    event_number = i // 2 + 1
                    annotation_text = f"Вход {event_number}" if is_entry else f"Выход {event_number}"
                    intersection_time_dt = datetime.fromisoformat(intersection['time'])
                    intersection_timestamp = intersection_time_dt.timestamp() * 1000
                    
                    series_fig.add_vline(
                        x=intersection_timestamp, line_width=2, line_dash="dash", line_color=line_color,
                        annotation_text=annotation_text, annotation_position="top left" if is_entry else "top right"
                    )

                series_fig.update_xaxes(
                    title="Время (UTC)", type="date", tickformat="%Y-%m-%d\n%H:%M:%S"
                )
        else:
            series_title = f"Нет данных для {segment_to_display['id']}"

    map_fig.update_layout(
        title=map_title, width=None, height=600,
        geo=dict(projection_type='orthographic', lonaxis_showgrid=True, lataxis_showgrid=True)
    )
    series_fig.update_layout(
        title=series_title, xaxis_title="Время (UTC)", width=None, height=600
    )
    
    return map_fig, series_fig
