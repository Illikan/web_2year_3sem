sync def fetch_site_data_async(session, site_id: str):
    """Асинхронно запрашивает данные для ОДНОЙ станции."""
    if site_id in station_cache:
        return station_cache[site_id]
        
    url = f"https://api.simurg.space/sites/{site_id.lower()}"
    try:
        async with session.get(url) as response:
            response.raise_for_status()
            simurg_data = await response.json()
            station_data = {
                'id': simurg_data['code'],
                'lat': simurg_data['location']['lat'],
                'lon': simurg_data['location']['lon'],
                'xyz': simurg_data['xyz']
            }
            station_cache[site_id] = station_data
            return station_data
    except Exception as e:
        # print(f"Ошибка при запросе {site_id}: {e}")
        station_cache[site_id] = None
        return None

async def get_all_site_data_concurrently(site_ids: list[str]):
    """
    Запускает запросы для всех нужных ID станций параллельно.
    """
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_site_data_async(session, site_id) for site_id in site_ids]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        # Отфильтровываем None и возможные исключения
        return [res for res in results if res is not None and not isinstance(res, Exception)]
