
import dash
from dash import dcc, html, Input, Output, State, no_update
import dash_bootstrap_components as dbc
import plotly.graph_objects as go
from datetime import datetime
import data_processing # Убедитесь, что новые функции есть в data_processing
from data_processing import get_segment_from_cache
import json
from pathlib import Path

app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP], prevent_initial_callbacks="initial_duplicate")

# --- LAYOUT (Макет) ---
# Модальное окно остается без изменений
modal = dbc.Modal(...) 

# Основной макет. Изменяем dcc.Store
app.layout = dbc.Container(
    [
        # У нас будет одно главное хранилище для состояния всей сессии
        dcc.Store(id='session-state-store', storage_type='session'),
        
        modal,

        dcc.Loading(
            id="loading-container",
            type="default",
            children=html.Div([
                dbc.Row([
                    dbc.Col(dcc.Graph(id='globe-graph'), width=7),
                    dbc.Col(dcc.Graph(id='series-graph'), width=5), 
                ]),
                dbc.Row(
                    dbc.Col(
                        html.Div([
                            # Добавляем disabled=True, чтобы кнопки были неактивны, пока нет сегмента
                            dbc.Button("Эффект есть", id="yes-button", color="success", className="me-3", disabled=True),
                            dbc.Button("Эффекта нет", id="no-button", color="danger", disabled=True),
                        ], className="d-flex justify-content-center mt-4"),
                        width=12
                    )
                )
            ], id="main-content", style={'visibility': 'hidden'}) # Используем visibility вместо display
        )
    ],
    fluid=True
)


# ==============================================================================
# КОЛБЭК №1: ИНИЦИАЛИЗАЦИЯ СЕССИИ (по кнопке "Загрузить")
# ==============================================================================
@app.callback(
    Output('session-state-store', 'data'),
    Output('settings-modal', 'is_open'),
    Output('main-content', 'style'),
    Input('submit-modal-button', 'n_clicks'),
    State('date-picker', 'date'),
    prevent_initial_call=True
)
def start_new_session(n_clicks, selected_date):
    """
    Запускается по кнопке в модальном окне.
    1. Получает отфильтрованный список станций (быстро).
    2. Инициализирует состояние сессии в dcc.Store.
    3. Не ищет первый сегмент! Это сделают кнопки "Да/Нет".
    """
    if not selected_date:
        return no_update, True, no_update
        
    study_date_dt = datetime.strptime(selected_date.split('T')[0], '%Y-%m-%d')
    
    # Эта функция должна быть в data_processing.py и работать быстро
    filtered_stations = data_processing.get_filtered_stations(study_date_dt)
    
    # Инициализируем начальное состояние "конвейера"
    initial_state = {
        'study_date': study_date_dt.isoformat(),
        'station_list': filtered_stations,
        'current_station_idx': 0,
        'current_sat_idx': 0,
        'current_segment_data': None, # Пока нет сегмента для отображения
        'is_finished': False
    }
    
    # Закрываем модальное окно и показываем основной интерфейс
    return initial_state, False, {'visibility': 'visible'}


# ==============================================================================
# КОЛБЭК №2: РАЗМЕТКА И ПОИСК СЛЕДУЮЩЕГО СЕГМЕНТА (по кнопкам "Да/Нет")
# ==============================================================================
@app.callback(
    Output('session-state-store', 'data', allow_duplicate=True),
    Input('yes-button', 'n_clicks'),
    Input('no-button', 'n_clicks'),
    State('session-state-store', 'data'),
    prevent_initial_call=True
)
def process_annotation_and_find_next(yes_clicks, no_clicks, session_state):
    """
    Запускается по кнопкам "Да/Нет".
    1. Сохраняет разметку для *предыдущего* сегмента (если он был).
    2. Вызывает find_next_valid_segment для поиска *следующего*.
    3. Обновляет состояние сессии в dcc.Store.
    """
    if not session_state:
        return no_update

    # --- Шаг 1: Сохранение разметки для предыдущего сегмента ---
    if session_state.get('current_segment_data'):
        segment_to_annotate = session_state['current_segment_data']
        ctx = dash.callback_context
        button_id = ctx.triggered[0]['prop_id'].split('.')[0]
        is_effect = (button_id == 'yes-button')
        
        # Добавляем разметку к метаданным
        segment_to_annotate['has_effect'] = is_effect
        
        # Логика сохранения в файл
        output_dir = Path("annotations")
        output_dir.mkdir(exist_ok=True)
        date_str = datetime.fromisoformat(session_state['study_date']).strftime('%Y-%m-%d')
        file_path = output_dir / f"annotations_{date_str}.jsonl"
        with open(file_path, 'a') as f:
            f.write(json.dumps(segment_to_annotate) + '\n')
        print(f"Сегмент {segment_to_annotate['id']} сохранен с is_effect={is_effect}")

    # --- Шаг 2: Поиск следующего валидного сегмента ---
    print("\nИщу следующий сегмент...")
    next_segment_metadata, next_station_idx, next_sat_idx = data_processing.find_next_valid_segment(
        study_date=datetime.fromisoformat(session_state['study_date']),
        station_list=session_state['station_list'],
        current_station_idx=session_state['current_station_idx'],
        current_sat_idx=session_state['current_sat_idx']
    )

    # --- Шаг 3: Обновление состояния сессии ---
    if next_segment_metadata:
        # Найден новый сегмент
        session_state['current_segment_data'] = next_segment_metadata
        session_state['current_station_idx'] = next_station_idx
        session_state['current_sat_idx'] = next_sat_idx
        session_state['is_finished'] = False
    else:
        # Сегменты закончились!
        print("Разметка для данной даты завершена.")
        session_state['is_finished'] = True
        session_state['current_segment_data'] = None
    
    return session_state


# ==============================================================================
# КОЛБЭК №3: ОТРИСОВКА (реагирует на изменение состояния)
# ==============================================================================
@app.callback(
    Output('globe-graph', 'figure'),
    Output('series-graph', 'figure'),
    Output('yes-button', 'disabled'),
    Output('no-button', 'disabled'),
    Input('session-state-store', 'data')
)
def update_graphs(session_state):
    """
    Полностью "глупый" колбэк. Просто рисует то, что лежит в session_state.
    """
    if not session_state:
        return no_update, no_update, True, True

    map_fig = go.Figure()
    series_fig = go.Figure()
    # ... (код для отрисовки полигона аномалии) ...
    
    segment_to_display_metadata = session_state.get('current_segment_data')
    is_finished = session_state.get('is_finished', False)

    if is_finished:
        map_title = "Маркировка завершена! Выберите новую дату."
        # Можно очистить и файловый кэш при завершении
        # data_processing.clear_geometry_cache()
    elif segment_to_display_metadata:
        # --- Логика отрисовки ОДНОГО сегмента ---
        event_id = segment_to_display_metadata['id']
        segment_full_data = get_segment_from_cache(event_id)
        
        if not segment_full_data:
            map_title = f"Ошибка: данные для {event_id} не найдены в кэше. Нажмите 'Нет' для пропуска."
            # ...
        else:
            # ... (здесь вся ваша логика отрисовки карты и графика, она остается прежней)
            # ... (используйте segment_full_data и segment_to_display_metadata) ...
            map_title = f"Сегмент на проверке: {event_id}"

        # Активируем кнопки, так как есть что размечать
        return map_fig, series_fig, False, False
    else:
        map_title = "Нажмите 'Да' или 'Нет', чтобы найти первый сегмент для разметки"
        
    map_fig.update_layout(title=map_title, ...)
    series_fig.update_layout(...)
    
    # Деактивируем кнопки, если размечать нечего
    return map_fig, series_fig, True, True


if __name__ == '__main__':
    app.run(debug=True)
